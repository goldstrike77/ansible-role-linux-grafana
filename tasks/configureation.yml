---
- name: Creating Grafana folder
  file:
    dest: '{{ grafana_path }}/grafana/dashboards'
    state: 'directory'
    owner: 'grafana'
    group: 'grafana'
    mode: '0755'

- name: Grafana sysconfig file transfer
  template:
    src: 'grafana-server.j2'
    dest: '/etc/sysconfig/grafana-server'
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0664'
  register: conf_updated

- name: Grafana Dashboards provisioning files discover
  find:
    paths: '/etc/grafana/provisioning/dashboards/'
    patterns: "^.*.yaml"
    use_regex: 'yes'
  register: grafana_provisioning_dashboard_wildcard_files_to_delete

- name: Grafana Dashboards provisioning structure cleanup
  file:
    path: '{{ item.path }}'
    state: 'absent'
  with_items: '{{ grafana_provisioning_dashboard_wildcard_files_to_delete.files }}'

- name: Grafana Dashboards provisioning structure establish
  template:
    src: 'dashboards.yaml.j2'
    dest: '/etc/grafana/provisioning/dashboards/{{ item.category }}.yaml'
    owner: 'root'
    group: 'grafana'
    mode: '0640'
  with_items:
    - '{{ grafana_dashboard_arg }}'
  register: dash_updated

- name: Grafana Datasources provisioning files discover
  find:
    paths: '/etc/grafana/provisioning/datasources/'
    patterns: "^.*.yaml"
    use_regex: 'yes'
  register: grafana_provisioning_datasources_wildcard_files_to_delete

- name: Grafana Datasources provisioning structure cleanup
  file:
    path: '{{ item.path }}'
    state: 'absent'
  with_items: '{{ grafana_provisioning_datasources_wildcard_files_to_delete.files }}'

- name: Grafana Datasources configuration
  template:
    src: 'datasources/{{ item.0.name }}.yaml.j2'
    dest: '/etc/grafana/provisioning/datasources/{{ item.0.name }}.yaml'
    owner: 'root'
    group: 'grafana'
    mode: '0640'
  with_subelements:
    - '{{ grafana_ds_arg }}'
    - 'settings'
  register: ds_updated

- name: Grafana Analytics configuration
  lineinfile:
    state: present
    dest: '/etc/grafana/grafana.ini'
    insertafter: '\[analytics\]'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  with_items:
    - { regexp: '^reporting_enabled =', line: 'reporting_enabled = {{ grafana_arg.reporting_enabled }}' }
    - { regexp: '^check_for_updates =', line: 'check_for_updates = {{ grafana_arg.check_for_updates }}' }

- name: Grafana Security configuration
  lineinfile:
    state: present
    dest: '/etc/grafana/grafana.ini'
    insertafter: '\[security\]'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  with_items:
    - { regexp: '^admin_user =',     line: 'admin_user = {{ grafana_admin_user }}' }
    - { regexp: '^admin_password =', line: 'admin_password = {{ grafana_admin_password }}' }
  register: secu_updated

- name: Grafana session configuration
  lineinfile:
    state: 'present'
    dest: '/etc/grafana/grafana.ini'
    insertafter: '\[session\]'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  with_items:
    - { regexp: '^provider =',        line: 'provider = redis' }
    - { regexp: '^provider_config =', line: 'provider_config = addr={{ grafana_redis_hosts }}:{{ grafana_redis_port }},pool_size=100,db=0,password={{ grafana_redis_requirepass }}' }
  when:
    - grafana_session_share or grafana_redis_dept | bool
    - grafana_version < 6.2
  register: sess_updated

- name: Grafana remote cache configuration
  lineinfile:
    state: 'present'
    dest: '/etc/grafana/grafana.ini'
    insertafter: '\[remote_cache\]'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  with_items:
    - { regexp: '^type =',    line: 'type = redis' }
    - { regexp: '^connstr =', line: 'connstr = addr={{ grafana_redis_hosts }}:{{ grafana_redis_port }},pool_size=100,db=0,password={{ grafana_redis_requirepass }}' }
  when:
    - grafana_session_share or grafana_redis_dept | bool
    - grafana_version >= 6.2
  register: sess_updated

- name: Grafana UI theme configuration
  lineinfile:
    state: 'present'
    dest: '/etc/grafana/grafana.ini'
    insertafter: '\[users\]'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
  with_items:
    - { regexp: '^default_theme =', line: 'default_theme = {{ grafana_arg.default_theme }}' }
